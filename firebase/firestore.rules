rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Users can only access their own user document
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null && request.auth.uid == userId;
      
      // User profile data validation
      allow write: if request.auth != null 
        && request.auth.uid == userId
        && validateUserData(request.resource.data);
    }
    
    // Predictions belong to specific users
    match /predictions/{predictionId} {
      allow read, write: if request.auth != null 
        && resource.data.userId == request.auth.uid;
      allow create: if request.auth != null 
        && request.resource.data.userId == request.auth.uid
        && validatePredictionData(request.resource.data);
      allow list: if request.auth != null 
        && resource.data.userId == request.auth.uid;
    }
    
    // User analytics - private to each user
    match /user_analytics/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null && request.auth.uid == userId;
    }
    
    // Dog profiles for users
    match /dog_profiles/{dogId} {
      allow read, write: if request.auth != null 
        && resource.data.ownerId == request.auth.uid;
      allow create: if request.auth != null 
        && request.resource.data.ownerId == request.auth.uid;
    }
    
    // Public data (read-only for authenticated users)
    match /public/{document=**} {
      allow read: if request.auth != null;
      allow write: if false; // Only admins can write public data
    }
    
    // App metadata and configuration
    match /app_config/{document=**} {
      allow read: if request.auth != null;
      allow write: if false; // Only admins
    }
    
    // Helper functions for data validation
    function validateUserData(data) {
      return data.keys().hasAll(['email', 'displayName', 'createdAt'])
        && data.email is string
        && data.displayName is string;
    }
    
    function validatePredictionData(data) {
      return data.keys().hasAll(['userId', 'emotion', 'confidence', 'timestamp'])
        && data.userId is string
        && data.emotion is string
        && data.confidence is number
        && data.confidence >= 0 && data.confidence <= 1;
    }
  }
}